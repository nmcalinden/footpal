// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/nmcalinden/footpal/api/repository (interfaces: MatchRepositoryI)

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	models "github.com/nmcalinden/footpal/api/models"
)

// MockMatchRepositoryI is a mock of MatchRepositoryI interface.
type MockMatchRepositoryI struct {
	ctrl     *gomock.Controller
	recorder *MockMatchRepositoryIMockRecorder
}

// MockMatchRepositoryIMockRecorder is the mock recorder for MockMatchRepositoryI.
type MockMatchRepositoryIMockRecorder struct {
	mock *MockMatchRepositoryI
}

// NewMockMatchRepositoryI creates a new mock instance.
func NewMockMatchRepositoryI(ctrl *gomock.Controller) *MockMatchRepositoryI {
	mock := &MockMatchRepositoryI{ctrl: ctrl}
	mock.recorder = &MockMatchRepositoryIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMatchRepositoryI) EXPECT() *MockMatchRepositoryIMockRecorder {
	return m.recorder
}

// DeletePlayerByMatch mocks base method.
func (m *MockMatchRepositoryI) DeletePlayerByMatch(arg0, arg1 *int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePlayerByMatch", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeletePlayerByMatch indicates an expected call of DeletePlayerByMatch.
func (mr *MockMatchRepositoryIMockRecorder) DeletePlayerByMatch(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePlayerByMatch", reflect.TypeOf((*MockMatchRepositoryI)(nil).DeletePlayerByMatch), arg0, arg1)
}

// FindAll mocks base method.
func (m *MockMatchRepositoryI) FindAll() (*[]models.Match, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAll")
	ret0, _ := ret[0].(*[]models.Match)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAll indicates an expected call of FindAll.
func (mr *MockMatchRepositoryIMockRecorder) FindAll() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAll", reflect.TypeOf((*MockMatchRepositoryI)(nil).FindAll))
}

// FindById mocks base method.
func (m *MockMatchRepositoryI) FindById(arg0 *int) (*models.Match, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindById", arg0)
	ret0, _ := ret[0].(*models.Match)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindById indicates an expected call of FindById.
func (mr *MockMatchRepositoryIMockRecorder) FindById(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindById", reflect.TypeOf((*MockMatchRepositoryI)(nil).FindById), arg0)
}

// Update mocks base method.
func (m *MockMatchRepositoryI) Update(arg0 *models.Match) (*models.Match, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0)
	ret0, _ := ret[0].(*models.Match)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockMatchRepositoryIMockRecorder) Update(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockMatchRepositoryI)(nil).Update), arg0)
}
