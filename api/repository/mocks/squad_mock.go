// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/nmcalinden/footpal/repository (interfaces: SquadRepositoryI)

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	models "github.com/nmcalinden/footpal/models"
)

// MockSquadRepositoryI is a mock of SquadRepositoryI interface.
type MockSquadRepositoryI struct {
	ctrl     *gomock.Controller
	recorder *MockSquadRepositoryIMockRecorder
}

// MockSquadRepositoryIMockRecorder is the mock recorder for MockSquadRepositoryI.
type MockSquadRepositoryIMockRecorder struct {
	mock *MockSquadRepositoryI
}

// NewMockSquadRepositoryI creates a new mock instance.
func NewMockSquadRepositoryI(ctrl *gomock.Controller) *MockSquadRepositoryI {
	mock := &MockSquadRepositoryI{ctrl: ctrl}
	mock.recorder = &MockSquadRepositoryIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSquadRepositoryI) EXPECT() *MockSquadRepositoryIMockRecorder {
	return m.recorder
}

// AddPlayer mocks base method.
func (m *MockSquadRepositoryI) AddPlayer(arg0 models.SquadPlayer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddPlayer", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddPlayer indicates an expected call of AddPlayer.
func (mr *MockSquadRepositoryIMockRecorder) AddPlayer(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddPlayer", reflect.TypeOf((*MockSquadRepositoryI)(nil).AddPlayer), arg0)
}

// Delete mocks base method.
func (m *MockSquadRepositoryI) Delete(arg0 *int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockSquadRepositoryIMockRecorder) Delete(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockSquadRepositoryI)(nil).Delete), arg0)
}

// FindAll mocks base method.
func (m *MockSquadRepositoryI) FindAll() (*[]models.Squad, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAll")
	ret0, _ := ret[0].(*[]models.Squad)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAll indicates an expected call of FindAll.
func (mr *MockSquadRepositoryIMockRecorder) FindAll() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAll", reflect.TypeOf((*MockSquadRepositoryI)(nil).FindAll))
}

// FindAllByPlayerId mocks base method.
func (m *MockSquadRepositoryI) FindAllByPlayerId(arg0 *int) (*[]models.Squad, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAllByPlayerId", arg0)
	ret0, _ := ret[0].(*[]models.Squad)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAllByPlayerId indicates an expected call of FindAllByPlayerId.
func (mr *MockSquadRepositoryIMockRecorder) FindAllByPlayerId(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAllByPlayerId", reflect.TypeOf((*MockSquadRepositoryI)(nil).FindAllByPlayerId), arg0)
}

// FindById mocks base method.
func (m *MockSquadRepositoryI) FindById(arg0 *int) (*models.Squad, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindById", arg0)
	ret0, _ := ret[0].(*models.Squad)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindById indicates an expected call of FindById.
func (mr *MockSquadRepositoryIMockRecorder) FindById(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindById", reflect.TypeOf((*MockSquadRepositoryI)(nil).FindById), arg0)
}

// FindPlayersBySquadId mocks base method.
func (m *MockSquadRepositoryI) FindPlayersBySquadId(arg0 *int) (*[]models.SquadPlayerDetails, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindPlayersBySquadId", arg0)
	ret0, _ := ret[0].(*[]models.SquadPlayerDetails)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindPlayersBySquadId indicates an expected call of FindPlayersBySquadId.
func (mr *MockSquadRepositoryIMockRecorder) FindPlayersBySquadId(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindPlayersBySquadId", reflect.TypeOf((*MockSquadRepositoryI)(nil).FindPlayersBySquadId), arg0)
}

// FindSquadByPlayerId mocks base method.
func (m *MockSquadRepositoryI) FindSquadByPlayerId(arg0, arg1 *int) (*models.Squad, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindSquadByPlayerId", arg0, arg1)
	ret0, _ := ret[0].(*models.Squad)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindSquadByPlayerId indicates an expected call of FindSquadByPlayerId.
func (mr *MockSquadRepositoryIMockRecorder) FindSquadByPlayerId(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindSquadByPlayerId", reflect.TypeOf((*MockSquadRepositoryI)(nil).FindSquadByPlayerId), arg0, arg1)
}

// Save mocks base method.
func (m *MockSquadRepositoryI) Save(arg0 *models.Squad) (*int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", arg0)
	ret0, _ := ret[0].(*int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Save indicates an expected call of Save.
func (mr *MockSquadRepositoryIMockRecorder) Save(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockSquadRepositoryI)(nil).Save), arg0)
}

// Update mocks base method.
func (m *MockSquadRepositoryI) Update(arg0 *models.Squad) (*models.Squad, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0)
	ret0, _ := ret[0].(*models.Squad)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockSquadRepositoryIMockRecorder) Update(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockSquadRepositoryI)(nil).Update), arg0)
}

// UpdatePlayerStatus mocks base method.
func (m *MockSquadRepositoryI) UpdatePlayerStatus(arg0, arg1 *int, arg2 int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePlayerStatus", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdatePlayerStatus indicates an expected call of UpdatePlayerStatus.
func (mr *MockSquadRepositoryIMockRecorder) UpdatePlayerStatus(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePlayerStatus", reflect.TypeOf((*MockSquadRepositoryI)(nil).UpdatePlayerStatus), arg0, arg1, arg2)
}
