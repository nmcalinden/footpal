// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/nmcalinden/footpal/api/repository (interfaces: VenueRepositoryI)

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	models "github.com/nmcalinden/footpal/api/models"
)

// MockVenueRepositoryI is a mock of VenueRepositoryI interface.
type MockVenueRepositoryI struct {
	ctrl     *gomock.Controller
	recorder *MockVenueRepositoryIMockRecorder
}

// MockVenueRepositoryIMockRecorder is the mock recorder for MockVenueRepositoryI.
type MockVenueRepositoryIMockRecorder struct {
	mock *MockVenueRepositoryI
}

// NewMockVenueRepositoryI creates a new mock instance.
func NewMockVenueRepositoryI(ctrl *gomock.Controller) *MockVenueRepositoryI {
	mock := &MockVenueRepositoryI{ctrl: ctrl}
	mock.recorder = &MockVenueRepositoryIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockVenueRepositoryI) EXPECT() *MockVenueRepositoryIMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *MockVenueRepositoryI) Delete(arg0 *int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockVenueRepositoryIMockRecorder) Delete(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockVenueRepositoryI)(nil).Delete), arg0)
}

// DeleteAdmin mocks base method.
func (m *MockVenueRepositoryI) DeleteAdmin(arg0 *int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAdmin", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAdmin indicates an expected call of DeleteAdmin.
func (mr *MockVenueRepositoryIMockRecorder) DeleteAdmin(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAdmin", reflect.TypeOf((*MockVenueRepositoryI)(nil).DeleteAdmin), arg0)
}

// DeletePitch mocks base method.
func (m *MockVenueRepositoryI) DeletePitch(arg0 *int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePitch", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeletePitch indicates an expected call of DeletePitch.
func (mr *MockVenueRepositoryIMockRecorder) DeletePitch(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePitch", reflect.TypeOf((*MockVenueRepositoryI)(nil).DeletePitch), arg0)
}

// FindAdminByUserId mocks base method.
func (m *MockVenueRepositoryI) FindAdminByUserId(arg0 *int) (*models.VenueAdmin, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAdminByUserId", arg0)
	ret0, _ := ret[0].(*models.VenueAdmin)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAdminByUserId indicates an expected call of FindAdminByUserId.
func (mr *MockVenueRepositoryIMockRecorder) FindAdminByUserId(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAdminByUserId", reflect.TypeOf((*MockVenueRepositoryI)(nil).FindAdminByUserId), arg0)
}

// FindAdminByVenue mocks base method.
func (m *MockVenueRepositoryI) FindAdminByVenue(arg0, arg1 *int) (*models.VenueAdmin, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAdminByVenue", arg0, arg1)
	ret0, _ := ret[0].(*models.VenueAdmin)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAdminByVenue indicates an expected call of FindAdminByVenue.
func (mr *MockVenueRepositoryIMockRecorder) FindAdminByVenue(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAdminByVenue", reflect.TypeOf((*MockVenueRepositoryI)(nil).FindAdminByVenue), arg0, arg1)
}

// FindAdminsByVenue mocks base method.
func (m *MockVenueRepositoryI) FindAdminsByVenue(arg0 *int) (*[]models.VenueAdmin, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAdminsByVenue", arg0)
	ret0, _ := ret[0].(*[]models.VenueAdmin)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAdminsByVenue indicates an expected call of FindAdminsByVenue.
func (mr *MockVenueRepositoryIMockRecorder) FindAdminsByVenue(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAdminsByVenue", reflect.TypeOf((*MockVenueRepositoryI)(nil).FindAdminsByVenue), arg0)
}

// FindAll mocks base method.
func (m *MockVenueRepositoryI) FindAll() (*[]models.Venue, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAll")
	ret0, _ := ret[0].(*[]models.Venue)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAll indicates an expected call of FindAll.
func (mr *MockVenueRepositoryIMockRecorder) FindAll() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAll", reflect.TypeOf((*MockVenueRepositoryI)(nil).FindAll))
}

// FindById mocks base method.
func (m *MockVenueRepositoryI) FindById(arg0 *int) (*models.Venue, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindById", arg0)
	ret0, _ := ret[0].(*models.Venue)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindById indicates an expected call of FindById.
func (mr *MockVenueRepositoryIMockRecorder) FindById(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindById", reflect.TypeOf((*MockVenueRepositoryI)(nil).FindById), arg0)
}

// FindPitchByVenueIdAndPitchId mocks base method.
func (m *MockVenueRepositoryI) FindPitchByVenueIdAndPitchId(arg0, arg1 *int) (*models.Pitch, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindPitchByVenueIdAndPitchId", arg0, arg1)
	ret0, _ := ret[0].(*models.Pitch)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindPitchByVenueIdAndPitchId indicates an expected call of FindPitchByVenueIdAndPitchId.
func (mr *MockVenueRepositoryIMockRecorder) FindPitchByVenueIdAndPitchId(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindPitchByVenueIdAndPitchId", reflect.TypeOf((*MockVenueRepositoryI)(nil).FindPitchByVenueIdAndPitchId), arg0, arg1)
}

// FindPitchTimeslots mocks base method.
func (m *MockVenueRepositoryI) FindPitchTimeslots(arg0 *int) (*[]models.PitchTimeSlot, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindPitchTimeslots", arg0)
	ret0, _ := ret[0].(*[]models.PitchTimeSlot)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindPitchTimeslots indicates an expected call of FindPitchTimeslots.
func (mr *MockVenueRepositoryIMockRecorder) FindPitchTimeslots(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindPitchTimeslots", reflect.TypeOf((*MockVenueRepositoryI)(nil).FindPitchTimeslots), arg0)
}

// FindPitchesByVenue mocks base method.
func (m *MockVenueRepositoryI) FindPitchesByVenue(arg0 *int) (*[]models.Pitch, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindPitchesByVenue", arg0)
	ret0, _ := ret[0].(*[]models.Pitch)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindPitchesByVenue indicates an expected call of FindPitchesByVenue.
func (mr *MockVenueRepositoryIMockRecorder) FindPitchesByVenue(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindPitchesByVenue", reflect.TypeOf((*MockVenueRepositoryI)(nil).FindPitchesByVenue), arg0)
}

// FindTimeslotsByVenueId mocks base method.
func (m *MockVenueRepositoryI) FindTimeslotsByVenueId(arg0 *int) (*[]models.VenueTimeSlot, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindTimeslotsByVenueId", arg0)
	ret0, _ := ret[0].(*[]models.VenueTimeSlot)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindTimeslotsByVenueId indicates an expected call of FindTimeslotsByVenueId.
func (mr *MockVenueRepositoryIMockRecorder) FindTimeslotsByVenueId(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindTimeslotsByVenueId", reflect.TypeOf((*MockVenueRepositoryI)(nil).FindTimeslotsByVenueId), arg0)
}

// Save mocks base method.
func (m *MockVenueRepositoryI) Save(arg0 *models.Venue) (*int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", arg0)
	ret0, _ := ret[0].(*int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Save indicates an expected call of Save.
func (mr *MockVenueRepositoryIMockRecorder) Save(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockVenueRepositoryI)(nil).Save), arg0)
}

// SaveAdmin mocks base method.
func (m *MockVenueRepositoryI) SaveAdmin(arg0 *models.VenueAdmin) (*int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveAdmin", arg0)
	ret0, _ := ret[0].(*int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SaveAdmin indicates an expected call of SaveAdmin.
func (mr *MockVenueRepositoryIMockRecorder) SaveAdmin(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveAdmin", reflect.TypeOf((*MockVenueRepositoryI)(nil).SaveAdmin), arg0)
}

// SavePitch mocks base method.
func (m *MockVenueRepositoryI) SavePitch(arg0 *models.Pitch) (*int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SavePitch", arg0)
	ret0, _ := ret[0].(*int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SavePitch indicates an expected call of SavePitch.
func (mr *MockVenueRepositoryIMockRecorder) SavePitch(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SavePitch", reflect.TypeOf((*MockVenueRepositoryI)(nil).SavePitch), arg0)
}

// Update mocks base method.
func (m *MockVenueRepositoryI) Update(arg0 *models.Venue) (*models.Venue, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0)
	ret0, _ := ret[0].(*models.Venue)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockVenueRepositoryIMockRecorder) Update(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockVenueRepositoryI)(nil).Update), arg0)
}

// UpdatePitch mocks base method.
func (m *MockVenueRepositoryI) UpdatePitch(arg0 *models.Pitch) (*models.Pitch, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePitch", arg0)
	ret0, _ := ret[0].(*models.Pitch)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdatePitch indicates an expected call of UpdatePitch.
func (mr *MockVenueRepositoryIMockRecorder) UpdatePitch(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePitch", reflect.TypeOf((*MockVenueRepositoryI)(nil).UpdatePitch), arg0)
}
