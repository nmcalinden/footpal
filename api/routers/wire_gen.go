// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package routers

import (
	"github.com/google/wire"
	controllers2 "github.com/nmcalinden/footpal/api/controllers"
	"github.com/nmcalinden/footpal/api/repository"
	services2 "github.com/nmcalinden/footpal/api/services"
	"github.com/nmcalinden/footpal/config"
)

// Injectors from wire.go:

func InitializeBookingController() *controllers2.BookingController {
	db := config.GetConnection()
	bookingRepository := repository.NewBookingRepository(db)
	bookingService := services2.NewBookingService(bookingRepository)
	bookingController := controllers2.NewBookingController(bookingService)
	return bookingController
}

func InitializeMatchController() *controllers2.MatchController {
	db := config.GetConnection()
	matchRepository := repository.NewMatchRepository(db)
	matchPlayerRepository := repository.NewMatchPlayerRepository(db)
	matchService := services2.NewMatchService(matchRepository, matchPlayerRepository)
	matchController := controllers2.NewMatchController(matchService)
	return matchController
}

func InitializePlayerController() *controllers2.PlayerController {
	db := config.GetConnection()
	playerRepository := repository.NewPlayerRepository(db)
	userRepository := repository.NewUserRepository(db)
	matchRepository := repository.NewMatchRepository(db)
	matchPlayerRepository := repository.NewMatchPlayerRepository(db)
	squadRepository := repository.NewSquadRepository(db)
	playerService := services2.NewPlayerService(playerRepository, userRepository, matchRepository, matchPlayerRepository, squadRepository)
	playerController := controllers2.NewPlayerController(playerService)
	return playerController
}

func InitializeSquadController() *controllers2.SquadController {
	db := config.GetConnection()
	playerRepository := repository.NewPlayerRepository(db)
	squadRepository := repository.NewSquadRepository(db)
	squadService := services2.NewSquadService(playerRepository, squadRepository)
	squadController := controllers2.NewSquadController(squadService)
	return squadController
}

func InitializeUserController() *controllers2.UserController {
	db := config.GetConnection()
	userRepository := repository.NewUserRepository(db)
	playerRepository := repository.NewPlayerRepository(db)
	venueRepository := repository.NewVenueRepository(db)
	userService := services2.NewUserService(userRepository, playerRepository, venueRepository)
	userController := controllers2.NewUserController(userService)
	return userController
}

func InitializeVenueController() *controllers2.VenueController {
	db := config.GetConnection()
	venueRepository := repository.NewVenueRepository(db)
	venueService := services2.NewVenueService(venueRepository)
	venueController := controllers2.NewVenueController(venueService)
	return venueController
}

// wire.go:

var BookingRepoSet = wire.NewSet(repository.NewBookingRepository, wire.Bind(new(repository.BookingRepositoryI), new(*repository.BookingRepository)))

var MatchRepoSet = wire.NewSet(repository.NewMatchRepository, wire.Bind(new(repository.MatchRepositoryI), new(*repository.MatchRepository)))

var MatchPlayerRepoSet = wire.NewSet(repository.NewMatchPlayerRepository, wire.Bind(new(repository.MatchPlayerRepositoryI), new(*repository.MatchPlayerRepository)))

var PlayerRepoSet = wire.NewSet(repository.NewPlayerRepository, wire.Bind(new(repository.PlayerRepositoryI), new(*repository.PlayerRepository)))

var SquadRepoSet = wire.NewSet(repository.NewSquadRepository, wire.Bind(new(repository.SquadRepositoryI), new(*repository.SquadRepository)))

var UserRepoSet = wire.NewSet(repository.NewUserRepository, wire.Bind(new(repository.UserRepositoryI), new(*repository.UserRepository)))

var VenueRepoSet = wire.NewSet(repository.NewVenueRepository, wire.Bind(new(repository.VenueRepositoryI), new(*repository.VenueRepository)))
