// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/nmcalinden/footpal/repository (interfaces: PlayerRepositoryI)

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	models "github.com/nmcalinden/footpal/models"
)

// MockPlayerRepositoryI is a mock of PlayerRepositoryI interface.
type MockPlayerRepositoryI struct {
	ctrl     *gomock.Controller
	recorder *MockPlayerRepositoryIMockRecorder
}

// MockPlayerRepositoryIMockRecorder is the mock recorder for MockPlayerRepositoryI.
type MockPlayerRepositoryIMockRecorder struct {
	mock *MockPlayerRepositoryI
}

// NewMockPlayerRepositoryI creates a new mock instance.
func NewMockPlayerRepositoryI(ctrl *gomock.Controller) *MockPlayerRepositoryI {
	mock := &MockPlayerRepositoryI{ctrl: ctrl}
	mock.recorder = &MockPlayerRepositoryIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPlayerRepositoryI) EXPECT() *MockPlayerRepositoryIMockRecorder {
	return m.recorder
}

// FindAll mocks base method.
func (m *MockPlayerRepositoryI) FindAll(arg0, arg1 int) (*[]models.Player, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAll", arg0, arg1)
	ret0, _ := ret[0].(*[]models.Player)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAll indicates an expected call of FindAll.
func (mr *MockPlayerRepositoryIMockRecorder) FindAll(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAll", reflect.TypeOf((*MockPlayerRepositoryI)(nil).FindAll), arg0, arg1)
}

// FindById mocks base method.
func (m *MockPlayerRepositoryI) FindById(arg0 *int) (*models.Player, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindById", arg0)
	ret0, _ := ret[0].(*models.Player)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindById indicates an expected call of FindById.
func (mr *MockPlayerRepositoryIMockRecorder) FindById(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindById", reflect.TypeOf((*MockPlayerRepositoryI)(nil).FindById), arg0)
}

// FindByUserId mocks base method.
func (m *MockPlayerRepositoryI) FindByUserId(arg0 *int) (*models.Player, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByUserId", arg0)
	ret0, _ := ret[0].(*models.Player)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByUserId indicates an expected call of FindByUserId.
func (mr *MockPlayerRepositoryIMockRecorder) FindByUserId(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByUserId", reflect.TypeOf((*MockPlayerRepositoryI)(nil).FindByUserId), arg0)
}

// GetTotal mocks base method.
func (m *MockPlayerRepositoryI) GetTotal() (*int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTotal")
	ret0, _ := ret[0].(*int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTotal indicates an expected call of GetTotal.
func (mr *MockPlayerRepositoryIMockRecorder) GetTotal() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTotal", reflect.TypeOf((*MockPlayerRepositoryI)(nil).GetTotal))
}

// Save mocks base method.
func (m *MockPlayerRepositoryI) Save(arg0 *models.Player) (*int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", arg0)
	ret0, _ := ret[0].(*int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Save indicates an expected call of Save.
func (mr *MockPlayerRepositoryIMockRecorder) Save(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockPlayerRepositoryI)(nil).Save), arg0)
}

// Update mocks base method.
func (m *MockPlayerRepositoryI) Update(arg0 *models.Player) (*models.Player, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0)
	ret0, _ := ret[0].(*models.Player)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockPlayerRepositoryIMockRecorder) Update(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockPlayerRepositoryI)(nil).Update), arg0)
}
